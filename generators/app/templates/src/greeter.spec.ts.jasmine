import { Greeter } from './greeter';

describe('Greeter', () => {

  const CUSTOM_GREETING = 'Hola';

  const greeter: Greeter = new Greeter();
  const customGreeter = new Greeter(CUSTOM_GREETING);

  it('should exist', () => {
    expect(Greeter).toBeDefined();
    expect(typeof Greeter).toEqual('function');
  });

  describe('greet()', () => {

    it('should exist', () => {
      expect(greeter.greet).toBeDefined();
      expect(typeof greeter.greet).toBe('function');
    });

    it('should use a default greeting if one is not provided', () => {
      const greeting = greeter.greet('World');

      expect(greeting).toEqual('Hello, World');
    });

    it('should use a custom greeting if provided', () => {
      const greeting = customGreeter.greet('World');

      expect(greeting).toEqual(`${CUSTOM_GREETING}, World`);
    });

  });

  describe('sayGreeting()', () => {

    let logSpy: jasmine.Spy;

    beforeEach(() => {
      logSpy = spyOn(console, 'log');
    });

    it('should exist', () => {
      expect(greeter.sayGreeting).toBeDefined();
      expect(typeof greeter.sayGreeting).toBe('function');
    });

    it('should print a default greeting to the console', () => {
      greeter.sayGreeting('World');

      expect(console.log).toHaveBeenCalledWith('Hello, World');
    });

    it('should print a custom greeting to the console', () => {
      customGreeter.sayGreeting('World');

      expect(console.log).toHaveBeenCalledWith('Hola, World');
    });

    afterEach(() => {
      logSpy.calls.reset();
    });

  });
});
